{
  "results": {
    "leaderboard_math_hard": {
      " ": " ",
      "alias": "leaderboard_math_hard"
    },
    "leaderboard_math_algebra_hard": {
      "alias": " - leaderboard_math_algebra_hard",
      "exact_match,none": 0.006514657980456026,
      "exact_match_stderr,none": 0.004599025618546257
    },
    "leaderboard_math_counting_and_prob_hard": {
      "alias": " - leaderboard_math_counting_and_prob_hard",
      "exact_match,none": 0.008130081300813009,
      "exact_match_stderr,none": 0.008130081300812993
    },
    "leaderboard_math_geometry_hard": {
      "alias": " - leaderboard_math_geometry_hard",
      "exact_match,none": 0.0,
      "exact_match_stderr,none": 0.0
    },
    "leaderboard_math_intermediate_algebra_hard": {
      "alias": " - leaderboard_math_intermediate_algebra_hard",
      "exact_match,none": 0.0035714285714285713,
      "exact_match_stderr,none": 0.0035714285714285652
    },
    "leaderboard_math_num_theory_hard": {
      "alias": " - leaderboard_math_num_theory_hard",
      "exact_match,none": 0.01948051948051948,
      "exact_match_stderr,none": 0.011173331005571059
    },
    "leaderboard_math_prealgebra_hard": {
      "alias": " - leaderboard_math_prealgebra_hard",
      "exact_match,none": 0.015544041450777202,
      "exact_match_stderr,none": 0.00892749271508432
    },
    "leaderboard_math_precalculus_hard": {
      "alias": " - leaderboard_math_precalculus_hard",
      "exact_match,none": 0.0,
      "exact_match_stderr,none": 0.0
    }
  },
  "group_subtasks": {
    "leaderboard_math_hard": [
      "leaderboard_math_algebra_hard",
      "leaderboard_math_counting_and_prob_hard",
      "leaderboard_math_geometry_hard",
      "leaderboard_math_intermediate_algebra_hard",
      "leaderboard_math_num_theory_hard",
      "leaderboard_math_prealgebra_hard",
      "leaderboard_math_precalculus_hard"
    ]
  },
  "configs": {
    "leaderboard_math_algebra_hard": {
      "task": "leaderboard_math_algebra_hard",
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "algebra",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x2ba911cd8790>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_math_counting_and_prob_hard": {
      "task": "leaderboard_math_counting_and_prob_hard",
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "counting_and_probability",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x2ba911cd8dc0>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_math_geometry_hard": {
      "task": "leaderboard_math_geometry_hard",
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "geometry",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x2ba911c92440>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_math_intermediate_algebra_hard": {
      "task": "leaderboard_math_intermediate_algebra_hard",
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "intermediate_algebra",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x2ba911c903a0>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_math_num_theory_hard": {
      "task": "leaderboard_math_num_theory_hard",
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "number_theory",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x2ba911bf1bd0>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_math_prealgebra_hard": {
      "task": "leaderboard_math_prealgebra_hard",
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "prealgebra",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x2ba911bf0b80>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "leaderboard_math_precalculus_hard": {
      "task": "leaderboard_math_precalculus_hard",
      "dataset_path": "lighteval/MATH-Hard",
      "dataset_name": "precalculus",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"problem\"],\n            \"solution\": doc[\"solution\"],\n            \"answer\": normalize_final_answer(\n                remove_boxed(last_boxed_only_string(doc[\"solution\"]))\n            ),\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return \"Problem:\" + \"\\n\" + doc[\"problem\"] + \"\\n\\n\" + \"Solution:\"\n",
      "doc_to_target": "{{answer if few_shot is undefined else solution}}",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    candidates = results[0]\n\n    unnormalized_answer = get_unnormalized_answer(candidates)\n    answer = normalize_final_answer(unnormalized_answer)\n\n    if is_equiv(answer, doc[\"answer\"]):\n        retval = 1\n    else:\n        retval = 0\n\n    results = {\n        \"exact_match\": retval,\n    }\n    return results\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": "<function list_fewshot_samples at 0x2ba910a6d630>"
      },
      "num_fewshot": 4,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "Problem:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "leaderboard_math_algebra_hard": 1.0,
    "leaderboard_math_counting_and_prob_hard": 1.0,
    "leaderboard_math_geometry_hard": 1.0,
    "leaderboard_math_intermediate_algebra_hard": 1.0,
    "leaderboard_math_num_theory_hard": 1.0,
    "leaderboard_math_prealgebra_hard": 1.0,
    "leaderboard_math_precalculus_hard": 1.0
  },
  "n-shot": {
    "leaderboard_math_algebra_hard": 4,
    "leaderboard_math_counting_and_prob_hard": 4,
    "leaderboard_math_geometry_hard": 4,
    "leaderboard_math_intermediate_algebra_hard": 4,
    "leaderboard_math_num_theory_hard": 4,
    "leaderboard_math_prealgebra_hard": 4,
    "leaderboard_math_precalculus_hard": 4
  },
  "higher_is_better": {
    "leaderboard_math_algebra_hard": {
      "exact_match": true
    },
    "leaderboard_math_counting_and_prob_hard": {
      "exact_match": true
    },
    "leaderboard_math_geometry_hard": {
      "exact_match": true
    },
    "leaderboard_math_hard": {
      "exact_match": true
    },
    "leaderboard_math_intermediate_algebra_hard": {
      "exact_match": true
    },
    "leaderboard_math_num_theory_hard": {
      "exact_match": true
    },
    "leaderboard_math_prealgebra_hard": {
      "exact_match": true
    },
    "leaderboard_math_precalculus_hard": {
      "exact_match": true
    }
  },
  "n-samples": {
    "leaderboard_math_algebra_hard": {
      "original": 307,
      "effective": 307
    },
    "leaderboard_math_counting_and_prob_hard": {
      "original": 123,
      "effective": 123
    },
    "leaderboard_math_geometry_hard": {
      "original": 132,
      "effective": 132
    },
    "leaderboard_math_intermediate_algebra_hard": {
      "original": 280,
      "effective": 280
    },
    "leaderboard_math_num_theory_hard": {
      "original": 154,
      "effective": 154
    },
    "leaderboard_math_prealgebra_hard": {
      "original": 193,
      "effective": 193
    },
    "leaderboard_math_precalculus_hard": {
      "original": 135,
      "effective": 135
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=continual_training/OLMo_1B_source/step738020-unsharded-hf,trust_remote_code=True",
    "model_num_parameters": 1176764416,
    "model_dtype": "torch.float32",
    "model_revision": "main",
    "model_sha": "",
    "batch_size": "32",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "41a4812",
  "date": 1722220500.5484445,
  "pretty_env_info": "PyTorch version: 2.3.1+cu121\nIs debug build: False\nCUDA used to build PyTorch: 12.1\nROCM used to build PyTorch: N/A\n\nOS: CentOS Linux release 7.9.2009 (Core) (x86_64)\nGCC version: (GCC) 8.3.1 20190311 (Red Hat 8.3.1-3)\nClang version: Could not collect\nCMake version: version 2.8.12.2\nLibc version: glibc-2.31\n\nPython version: 3.10.0 (default, Mar  3 2022, 09:58:08) [GCC 7.5.0] (64-bit runtime)\nPython platform: Linux-3.10.0-1160.el7.x86_64-x86_64-with-glibc2.31\nIs CUDA available: True\nCUDA runtime version: 11.7.99\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA GeForce RTX 3090\nGPU 1: NVIDIA GeForce RTX 3090\n\nNvidia driver version: 535.171.04\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:          x86_64\nCPU op-mode(s):        32-bit, 64-bit\nByte Order:            Little Endian\nCPU(s):                96\nOn-line CPU(s) list:   0-95\nThread(s) per core:    2\nCore(s) per socket:    24\n座：                 2\nNUMA 节点：         2\n厂商 ID：           AuthenticAMD\nCPU 系列：          23\n型号：              49\n型号名称：        AMD EPYC 7402 24-Core Processor\n步进：              0\nCPU MHz：             1500.000\nCPU max MHz:           2800.0000\nCPU min MHz:           1500.0000\nBogoMIPS：            5599.92\n虚拟化：           AMD-V\nL1d 缓存：          32K\nL1i 缓存：          32K\nL2 缓存：           512K\nL3 缓存：           16384K\nNUMA 节点0 CPU：    0-23,48-71\nNUMA 节点1 CPU：    24-47,72-95\nFlags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc art rep_good nopl nonstop_tsc extd_apicid aperfmperf eagerfpu pni pclmulqdq monitor ssse3 fma cx16 sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_l2 cpb cat_l3 cdp_l3 hw_pstate sme retpoline_amd ssbd ibrs ibpb stibp vmmcall fsgsbase bmi1 avx2 smep bmi2 cqm rdt_a rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local clzero irperf xsaveerptr arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold avic v_vmsave_vmload vgif umip overflow_recov succor smca\n\nVersions of relevant libraries:\n[pip3] mypy==1.3.0\n[pip3] mypy-extensions==1.0.0\n[pip3] numpy==1.26.4\n[pip3] torch==2.3.1\n[pip3] torchmetrics==1.4.0.post0\n[pip3] triton==2.3.1\n[conda] numpy                     1.26.4                   pypi_0    pypi\n[conda] torch                     2.3.1                    pypi_0    pypi\n[conda] torchmetrics              1.4.0.post0              pypi_0    pypi\n[conda] triton                    2.3.1                    pypi_0    pypi",
  "transformers_version": "4.42.4",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|padding|>",
    "1"
  ],
  "tokenizer_eos_token": [
    "|||IP_ADDRESS|||",
    "50279"
  ],
  "tokenizer_bos_token": [
    null,
    "None"
  ],
  "eot_token_id": 50279,
  "max_length": 2048,
  "task_hashes": {},
  "model_source": "hf",
  "model_name": "continual_training/OLMo_1B_source/step738020-unsharded-hf",
  "model_name_sanitized": "continual_training__OLMo_1B_source__step738020-unsharded-hf",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 8084948.222732884,
  "end_time": 8086654.777333131,
  "total_evaluation_time_seconds": "1706.554600247182"
}