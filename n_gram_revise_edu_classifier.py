from transformers import AutoTokenizer, AutoModelForSequenceClassification
from n_gram_test import load_object_from_file
from nltk import word_tokenize


threshold = 0.000001
text = "[Opening speech of the Congress President of the German Society for Pathology].\n\nGenerate your own set of questions and answers about the above article:\n****\n[Ques]: what is the congress president of the german society for?\n[Ans]: Here's my solution: [Opening speech of the Congress President of the German Society for Pathology]. The answer is Pathology\n\nInhibition of factor IXa and factor Xa by antithrombin III/heparin during factor X activation.\nWe investigated the kinetics of the inhibitory action of antithrombin III and antithrombin III plus heparin during the activation of factor X by factor IXa. Generation and inactivation curves were fitted to a three-parameter two-exponentional model to determine the pseudo first-order rate constants of inhibition of factor IXa and factor Xa by antithrombin III/heparin. In the absence of heparin, the second-order rate constant of inhibition of factor Xa generated by factor IXa was 2.5-fold lower than the rate constant of inhibition of exogenous factor Xa. It appeared that phospholipid-bound factor X protected factor Xa from inactivation by antithrombin III. It is, as yet, unclear whether an active site or a nonactive site interaction between factor Xa and factor X at the phospholipid surface is involved. The inactivation of factor IXa by antithrombin III was found to be very slow and was not affected by phospholipid, calcium, and/or factor X. With unfractionated heparin above 40 ng/ml and antithrombin III at 200 nM, the apparent second-order rate constant of inhibition of exogenous and generated factor Xa were the same. Thus, in this case phospholipid-bound factor X did not protect factor Xa from inhibition. In the presence of synthetic pentasaccharide heparin, however, phospholipid-bound factor X reduced the rate constant about 5-fold. Pentasaccharide had no effect on the factor IXa/antithrombin III reaction. Unfractionated heparin (1 micrograms/ml) stimulated the antithrombin III-dependent inhibition of factor IXa during factor X activation 400-fold. In the absence of reaction components this stimulated was 65-fold. We established that calcium stimulated the heparin-dependent inhibition of factor IXa.\nGenerate your own set of questions and answers about the above article:\n****\n[Ques]: does the pentasaccharide heparin reduce the inhibitory effect of antithrombin III on factor X activation?\n[Ans]: Here's my solution: The inhibitory effect of antithrombin III on factor X activation can be reduced by a factor of approximately 5 when the reaction is performed in the presence of synthetic pentasaccharide heparin. This effect is independent of the concentration of calcium present. We propose that the reduction in inhibitory effect is due to a change in the conformation of factor Xa upon binding to the phospholipid surface, which allows the factor Xa active site to be directed toward the inhibitory peptide bond of antithrombin III. The answer is Yes\n\n[Molecular imaging of beta-amyloid plaques in the brain].\nAlzheimer's disease (AD) is a neurodegenerative disease characterized by dementia, cognitive impairment, and memory loss. Postmortem brains of AD patients reveal neuropathological features; the presence of beta-amyloid plaques and neurofibrillary tangles, which contain beta-amyloid peptides (Abeta) and highly phosphorylated tau proteins. Increases in the concentration of Abeta in the course of the disease lead to gradual increase in the load of beta-amyloid plaques, which is thought to be an initial neuropathological change in AD brains. Thus, the development of radiotracers for in vivo imaging beta-amyloid plaques in the aging human brain is an important and active area of molecular imaging. When used in combination with positron emission tomography (PET) or single photon emission computed tomography (SPECT), amyloid imaging agents could serve as surrogate markers in early diagnosis and neuropathogenesis studies of AD. Furthermore, quantitative evaluation of beta-amyloid plaques in the brain could allow facilitate the evaluation of the efficacy of anti-amyloid therapies that are currently being investigated. A number of groups have worked to develop radiolabeled amyloid imaging agents, and clinical trials in AD patients have been reported with several agents including [18F]FDDNP, [11C]PIB, [11C]SB-13 and [123I]IMPY, indicating that detecting beta-amyloid plaques in the living human brain with amyloid imaging agents is potentially feasible. More recently, we have reported additional promising compounds such as flavone or chalcone derivatives. The combination of relatively high binding affinity to Abeta and high brain uptake and good clearance in mice of these flavonoid derivatives provides a series of potential amyloid imaging agents for PET and SPECT. In this manuscript, recent progress in amyloid imaging studies is reviewed with the development of amyloid imaging agents.\nGenerate your own set of questions and answers about the above article:\n****\n[Ques]: are beta-amyloid plaques in the brain detectable with molecular imaging?\n[Ans]: Here's my solution: Detection of beta-amyloid plaques in the living human brain with amyloid imaging agents is potentially feasible. The answer is Yes"
cpd_file_path = "data/bio/instruction_biomed_n_gram_probs/cpd.pkl"


cpd = load_object_from_file(cpd_file_path)
tokens = word_tokenize(text.lower())  
token_probs = {}
n = 0

for i in range(1, len(tokens)):
    context = tokens[i-1]
    word = tokens[i]
    prob = cpd[context].prob(word) if context in cpd else 0.0
    token_probs[word] = prob
    if prob < threshold:
        prob_dist = cpd[context]
        possible_words = list(prob_dist.samples())  
        possible_words_sorted = sorted(possible_words, key=lambda w: prob_dist.prob(w), reverse=True)
        top_predictions = [(w, prob_dist.prob(w)) for w in possible_words_sorted[:16]]
        n += 1
        print(f"Predictions for context '{tokens[i-1]}', golden token '{word}': {top_predictions}" + "\n\n\n")
        
    else:
        top_predictions = [] 
            
print(f"revised times : {n}")
        


# tokenizer = AutoTokenizer.from_pretrained("HuggingFaceTB/fineweb-edu-classifier")
# model = AutoModelForSequenceClassification.from_pretrained("HuggingFaceTB/fineweb-edu-classifier")

# text = "This is a test sentence."
# inputs = tokenizer(text, return_tensors="pt", padding="longest", truncation=True)
# outputs = model(**inputs)
# logits = outputs.logits.squeeze(-1).float().detach().numpy()
# score = logits.item()
# result = {
#     "text": text,
#     "score": score,
#     "int_score": int(round(max(0, min(score, 5)))),
# }

# print(result)